@model TalentAcquisition.Core.Domain.Interview

<div class="col-md-12" style="min-height:15em">
    @using (Html.BeginForm("_SubmitCandidateAvailabilityForm","Application",FormMethod.Post,new { @class="form",@id="form"}))
    {
        @Html.AntiForgeryToken()
        HtmlHelper.UnobtrusiveJavaScriptEnabled = false;
        <div class="form-horizontal">
            @*<style>
                label{
                    font-size:90%;
                }
            </style>*@
            @Html.HiddenFor(model=>model.InterviewID)
            @*<input type="hidden" name="InterviewID" value="@Model.InterviewID" />*@
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group hidden">
                @Html.LabelFor(model => model.JobRequisitionID, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.JobRequisitionID, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.JobRequisitionID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group hidden">
                @Html.LabelFor(model => model.JobApplicationID, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.JobApplicationID, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.JobApplicationID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group hidden">
                @Html.LabelFor(model => model.OfficePositionID, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.OfficePositionID, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.OfficePositionID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ProposedDate1,"Proposed Date 1", htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    <input type="text" name="ProposedDate1" data-date-format="DD-MM-YYYY" id="ProposedDate1" class="form-control" value="@Model.ProposedDate1" no-padding placeholder="Pick First Date for Interview" />
                    @*@Html.EditorFor(model => model.ProposedDate1, new { htmlAttributes = new { @class = "form-control" } })*@
                    @Html.ValidationMessageFor(model => model.ProposedDate1, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ProposedDate2, "Proposed Date 2", htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    <input type="text" name="ProposedDate2" data-date-format="DD-MM-YYYY" id="ProposedDate2" class="form-control" value="@Model.ProposedDate2" placeholder="Pick Second Date for Interview" />
                    @*@Html.EditorFor(model => model.ProposedDate2, new { htmlAttributes = new { @class = "form-control" } })*@
                    @Html.ValidationMessageFor(model => model.ProposedDate2, "", new { @class = "text-danger" })
                </div>
            </div>
            @*<div class="padding"></div>
            <div class="padding"></div>
            <div class="padding"></div>
            <div class="padding"></div>
            <div class="padding"></div>*@
            @*<div class="form-group hidden">
                @Html.LabelFor(model => model.ScheduledDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ScheduledDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ScheduledDate, "", new { @class = "text-danger" })
                </div>
            </div>*@

            <div class="form-group">
                <div class="col-md-offset-4 col-md-8">
                    <input id="changedates" type="submit" value="Send Proposed Date" class="btn btn-success" />
                </div>
            </div>
        </div>
    }

</div>

@Scripts.Render("~/bundles/jqueryval")
<script type="text/javascript">
    var id1=@ViewBag.requisitionid;
    var id2=@ViewBag.applicationid;
    var interview=0;

    function LoadInterviewTeamForm() {
        @*$("#interviewteam").load("@(Url.Action("_GetChooseInterviewTeamForm", new { requisitionid = ViewBag.requisitionid, applicationid = ViewBag.applicationid }))");*@
        @*var url= "@(Url.Action("_GetChooseInterviewTeamForm","Application", new { requisitionid = ViewBag.requisitionid, applicationid = ViewBag.applicationid }))";*@
        var url="/Application/_GetChooseInterviewTeamForm?requisitionid="+id1 +"&applicationid="+id2+"&interviewid="+interview;
        //alert(url);
       // $("#interviewteam").load(url);
        $.get(url,{}, function (data, status, jqXHR) {
            $("#interviewteam").append(data);
           });
    }

    $(function () {
        var form = $("#form");
        form.submit(function (e) {
            e.preventDefault();
            var input1 = $("#ProposedDate1");
            var input2 = $("#ProposedDate2");
            if ((input1.val() == "") || (input1.val() == "")) {
               
                //input1.closest("span").append("Enter Date").show();
            }
            else
            {
                $("#changedates").attr("disabled",true);
                $.ajax({
                    type:"POST",
                    url:form.attr("action"),
                    data:form.serialize(),
                    success: function (data) {
                        if (data.action){
                            alert("Success");
                            interview=data.interviewid;
                            LoadInterviewTeamForm();
                        }
                    },
                    error:function(error){
                        alert("Error");
                    }
                });
            }
        });

        $("#form").validate({  
            errorClass: 'help-block animation-slideDown', // You can change the animation class for a different entrance animation - check animations page  
            errorElement: 'div',  
            errorPlacement: function (error, e) {  
                e.parents('.form-group > div').append(error);  
            },  
            highlight: function (e) {  
    
                $(e).closest('.form-group').removeClass('has-success has-error').addClass('has-error');  0
                $(e).closest('.help-block').remove();  
            },  
            success: function (e) {  
                e.closest('.form-group').removeClass('has-success has-error');  
                e.closest('.help-block').remove();  
            },  
            rules: {  
                'ProposedDate1': {  
                    required: true
                    //date: true  
                } 
  
                //'Password': {  
                //    required: true,  
                //    minlength: 6  
                //},  
  
                //'ConfirmPassword': {  
                //    required: true,  
                //    equalTo: '#Password'  
                //}  
            },  
            messages: {  
                'ProposedDate1': 'Please enter valid Date' 
  
                //'Password': {  
                //    required: 'Please provide a password',  
                //    minlength: 'Your password must be at least 6 characters long'  
                //},  
  
                //'ConfirmPassword': {  
                //    required: 'Please provide a password',  
                //    minlength: 'Your password must be at least 6 characters long',  
                //    equalTo: 'Please enter the same password as above'  
                //}  
            }  
        });    
    });
</script>

